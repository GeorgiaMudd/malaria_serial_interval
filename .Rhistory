getwd()
source('parametersCommon.R')
if(!require(plotrix)){install.packages('plotrix'); library(plotrix)}
load(plotrix)
install.packages("plotrix")
source('parametersCommon.R')
install.packages("spatstat")
library(spatstat)
source('parametersCommon.R')
if(!require(plotrix)){install.packages('plotrix'); library(plotrix)}
pF = points.poisson(Nf)
XFcoord = pF$x # blood-feeding habitat coordinate X
YFcoord = pF$y # blood-feeding habitat coordinate Y
XLcoord = rnorm(Nl, XFcoord[larvalLocations], .01) # larval habitat coordinate X
YLcoord = rnorm(Nl, YFcoord[larvalLocations], .01) # larval habitat coordinate Y
L = matrix(0, Nf, Nl)
F = matrix(0, Nl, Nf)
L = mosquitoMovement(XFcoord, YFcoord, XLcoord, YLcoord, surv = survL, mixing = 'poor')
F = mosquitoMovement(XLcoord, YLcoord, XFcoord, YFcoord, surv = survF, mixing = 'poor')
H = makeHpoorHostMixing(Nf, Nh, Hh)
U = makeUrossMacdonald(H)
Nh = dim(H)[1]
source('variables.R')
source('calculateMetrics.R')
source('calculateKernels.R')
install.packages("Biodem")
install.packages("popbio")
source('variables.R')
source('calculateMetrics.R')
source('calculateKernels.R')
pdf(file = '../output/fig2.pdf', width = 6, height = 6)
par(oma = c(3, 5, 1, 0), mar = c(1.5, 1.5, .5, 1.5), las = 1)
layout(matrix(1 : 4, 2, 2))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxQ = max(Q_pdf.emp) - max(Q_pdf.emp) %% 0.01
meanDQ = sum(Q_pdf.emp * bins)
Q_pdf.emp[which.max(Q_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, Q_pdf.emp, lwd = 3, col = 'gray')
lines(Q_pdf.sth$x, Q_pdf.sth$y, lwd = 3)
segments(meanDQ, 0, meanDQ, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2), labels = FALSE)
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxQ)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(a)', side = 3, adj = 0, line = -.3, cex = 1)
text(x = meanDQ + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDQ - meanDQ %% 0.01)))
text(x = meanDQ + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[Q]))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxZ = max(Z_pdf.emp) - max(Z_pdf.emp) %% 0.01
meanDZ = sum(Z_pdf.emp * bins)
Z_pdf.emp[which.max(Z_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, Z_pdf.emp, lwd = 3, col = 'gray')
lines(Z_pdf.sth$x, Z_pdf.sth$y, lwd = 3)
segments(meanDZ, 0, meanDZ, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2))
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxZ)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(c)', side = 3, adj = 0, line = -.3, cex = 1)
mtext('Distance', side = 1, adj = 0, line = 2.75, at = 1.01)
par(las = 0)
mtext('Kernel density', side = 2, adj = 0, line = 2.75, at = .42, outer = TRUE)
par(las = 1)
text(x = meanDZ + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDZ - meanDZ %% 0.01)))
text(x = meanDZ + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[Z]))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxP = max(P_pdf.emp) - max(P_pdf.emp) %% 0.01
meanDP = sum(P_pdf.emp * bins)
P_pdf.emp[which.max(P_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, P_pdf.emp, lwd = 3, col = 'gray')
lines(P_pdf.sth$x, P_pdf.sth$y, lwd = 3)
segments(meanDP, 0, meanDP, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2), labels = FALSE)
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxP)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(b)', side = 3, adj = 0, line = -.3, cex = 1)
text(x = meanDP + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDP - meanDP %% 0.01)))
text(x = meanDP + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[P]))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxS = max(S_pdf.emp) - max(S_pdf.emp) %% 0.01
meanDS = sum(S_pdf.emp * bins)
S_pdf.emp[which.max(S_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, S_pdf.emp, lwd = 3, col = 'gray')
lines(S_pdf.sth$x, S_pdf.sth$y, lwd = 3)
segments(meanDS, 0, meanDS, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2))
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxS)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(d)', side = 3, adj = 0, line = -.3, cex = 1)
text(x = meanDS + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDS - meanDS %% 0.01)))
text(x = meanDS + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[S]))
dev.off()
par(oma = c(3, 5, 1, 0), mar = c(1.5, 1.5, .5, 1.5), las = 1)
layout(matrix(1 : 4, 2, 2))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxQ = max(Q_pdf.emp) - max(Q_pdf.emp) %% 0.01
meanDQ = sum(Q_pdf.emp * bins)
Q_pdf.emp[which.max(Q_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, Q_pdf.emp, lwd = 3, col = 'gray')
lines(Q_pdf.sth$x, Q_pdf.sth$y, lwd = 3)
segments(meanDQ, 0, meanDQ, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2), labels = FALSE)
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxQ)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(a)', side = 3, adj = 0, line = -.3, cex = 1)
text(x = meanDQ + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDQ - meanDQ %% 0.01)))
text(x = meanDQ + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[Q]))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxZ = max(Z_pdf.emp) - max(Z_pdf.emp) %% 0.01
meanDZ = sum(Z_pdf.emp * bins)
Z_pdf.emp[which.max(Z_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, Z_pdf.emp, lwd = 3, col = 'gray')
lines(Z_pdf.sth$x, Z_pdf.sth$y, lwd = 3)
segments(meanDZ, 0, meanDZ, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2))
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxZ)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(c)', side = 3, adj = 0, line = -.3, cex = 1)
mtext('Distance', side = 1, adj = 0, line = 2.75, at = 1.01)
par(las = 0)
mtext('Kernel density', side = 2, adj = 0, line = 2.75, at = .42, outer = TRUE)
par(las = 1)
text(x = meanDZ + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDZ - meanDZ %% 0.01)))
text(x = meanDZ + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[Z]))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxP = max(P_pdf.emp) - max(P_pdf.emp) %% 0.01
meanDP = sum(P_pdf.emp * bins)
P_pdf.emp[which.max(P_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, P_pdf.emp, lwd = 3, col = 'gray')
lines(P_pdf.sth$x, P_pdf.sth$y, lwd = 3)
segments(meanDP, 0, meanDP, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2), labels = FALSE)
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxP)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(b)', side = 3, adj = 0, line = -.3, cex = 1)
text(x = meanDP + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDP - meanDP %% 0.01)))
text(x = meanDP + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[P]))
plot(-1,
xlim = range(bins), ylim = c(0, .03),
xlab = '', ylab = '',
axes = FALSE)
maxS = max(S_pdf.emp) - max(S_pdf.emp) %% 0.01
meanDS = sum(S_pdf.emp * bins)
S_pdf.emp[which.max(S_pdf.emp)] = .03
segments(bins, rep(0, length(bins)), bins, S_pdf.emp, lwd = 3, col = 'gray')
lines(S_pdf.sth$x, S_pdf.sth$y, lwd = 3)
segments(meanDS, 0, meanDS, 0.03, col = 1, lty = 2, lwd = 3)
axis(1, seq(0, 1, .2))
axis(2, seq(0, .03, .01), labels = c('0.0', '0.01', '0.02', as.character(maxS)))
axis.break(2, .028, style = 'slash', brw = .03)
mtext('(d)', side = 3, adj = 0, line = -.3, cex = 1)
text(x = meanDS + .01, y = .0285, pos = 4,
labels = paste('E{    } =', as.character(meanDS - meanDS %% 0.01)))
text(x = meanDS + .01 + .08, y = .0282, pos = 4,
labels = expression(delta[S]))
load('../data/parametersCommon.RData')
pF = points.clustered(Nf)
XFcoord = pF$x # blood-feeding habitat coordinate X
YFcoord = pF$y # blood-feeding habitat coordinate Y
XLcoord = rnorm(Nl, XFcoord[larvalLocations], .01) # larval habitat coordinate X
YLcoord = rnorm(Nl, YFcoord[larvalLocations], .01) # larval habitat coordinate Y
L = matrix(0, Nf, Nl)
F = matrix(0, Nl, Nf)
L = mosquitoMovement(XFcoord, YFcoord, XLcoord, YLcoord, surv = survL, mixing = 'poor')
F = mosquitoMovement(XLcoord, YLcoord, XFcoord, YFcoord, surv = survF, mixing = 'poor')
H = makeHpoorHostMixing(Nf, Nh, Hh)
U = makeUrossMacdonald(H)
Nh = dim(H)[1]
source('variables.R')
source('calculateMetrics.R')
save(list = ls(), file = '../data/clustered.RData')
pF = points.poisson(Nf)
XFcoord = pF$x # blood-feeding habitat coordinate X
YFcoord = pF$y # blood-feeding habitat coordinate Y
XLcoord = rnorm(Nl, XFcoord[larvalLocations], .01) # larval habitat coordinate X
YLcoord = rnorm(Nl, YFcoord[larvalLocations], .01) # larval habitat coordinate Y
L = matrix(0, Nf, Nl)
F = matrix(0, Nl, Nf)
L = mosquitoMovement(XFcoord, YFcoord, XLcoord, YLcoord, surv = survL, mixing = 'poor')
F = mosquitoMovement(XLcoord, YLcoord, XFcoord, YFcoord, surv = survF, mixing = 'poor')
H = makeHpoorHostMixing(Nf, Nh, Hh)
U = makeUrossMacdonald(H)
Nh = dim(H)[1]
source('variables.R')
source('calculateMetrics.R')
save(list = ls(), file = '../data/poisson.RData')
pF = points.overdispersed(Nf)
XFcoord = pF$x # blood-feeding habitat coordinate X
YFcoord = pF$y # blood-feeding habitat coordinate Y
XLcoord = rnorm(Nl, XFcoord[larvalLocations], .01) # larval habitat coordinate X
YLcoord = rnorm(Nl, YFcoord[larvalLocations], .01) # larval habitat coordinate Y
warnings()
?rSSI()
?source()
pF = points.overdispersed(Nf)
?mosquitoMovement()
?rpois()
?rpoispp()
?disc()
?mtx.exp()
a = points.clustered(100)
plot(a)
b = points.overdispersed(100)
warnings()
b = points.oversdispersed(10)
b = points.overdispersed(10)
plot(b)
?rSSI
plot(points.overdispersed(25))
warnings()
?rSSI()
plot(b)
simulation100 = points.overdispersed(100)
plot(simulation100)
length(GI.U.mean)
load("~/Dropbox/serialinterval_malaria/output/Fig1.RData")
load("~/Dropbox/serialinterval_malaria/output/Fig2.RData")
length(GI.U.mean)
plot(1:864, GI.U.mean)
plot(1:864, GI.U.mean)
par(mfrow=c(1,1))
plot(1:864, GI.U.mean)
leastsquares.gamma = function(par){
x = 1:863
values = dgamma(x, shape = par[1], scale = par[2])
sum((values - GI.U.mean)^2)
}
optim(par = c(10,15), leastsquares.gamma)
lines(1:864, dgamma(1:864, shape = 5.38, scale = 15.65), col = "red")
plot(1:864, GI.T.mean)
leastsquares.gamma = function(par){
x = 1:863
values = dgamma(x, shape = par[1], scale = par[2])
sum((values - GI.T.mean)^2)
}
optim(par = c(10,15), leastsquares.gamma)
lines(1:864, dgamma(1:864, shape = 27.37, scale = 1.73))
library(pracma)
# load appropriate data
gametocytemia.U = as.matrix(read.csv('~/Dropbox/malaria_serial_interval/data/Gametocytemia.csv',header=F))
IDP.A = hist(unlist(sapply(1:nrow(gametocytemia.U),function(ii) #Infection to Detection Period (Asymptomatic)
which(gametocytemia.U[ii,]>20))),breaks=seq(.5,801.5,1),plot=F)$density[1:365]
IDP.S = as.numeric(unlist(read.csv('~/Dropbox/malaria_serial_interval/data/bite_to_clinic.csv'))) #Infection to Detection Symptomatic
GT.UT.data = as.matrix(read.csv('~/Dropbox/malaria_serial_interval/data/secondary_probabilities_general.csv')) #Untreated GT
GT.T.data = as.matrix(read.csv('~/Dropbox/malaria_serial_interval/data/new_drug_secondary_probabilities_general.csv')) #Treated GT
gamma.shape = c(27.37, 5.38)
gamma.scale = c(1.73, 15.65)
# normalize data
normalize = function(x){
x = x / sum(x)
}
GT.UT.data = normalize(GT.UT.data)
GT.T.data = normalize(GT.T.data)
# approximate functions for the treated and untreated GT
GT.UT.fun = approxfun(x = 1:863, y = GT.UT.data)
GT.T.fun = approxfun(x = 1:863, y = GT.T.data)
# calculate the characteristic equation for a specific case history.
# argument case.history: a vector of 1's and 2's where 1 signifies "treated" or symptomatic" and 2 signifies "untreated" or "asymptomatic"
# argument SI.status: a boolean that indicates whether the serial interval will be calculated.
characteristic.equation = function(case.history, SI.status){
number.cases = length(case.history)
number.generations = number.cases - 1
shape = vector(mode = "double", length = number.generations)
scale = vector(mode = "double", length = number.generations)
for(ii in 1:number.generations){
case.index = case.history[ii]
shape[ii] = gamma.shape[as.numeric(case.index)]
scale[ii] = gamma.scale[as.numeric(case.index)]
}
char_eq = eval(parse(text = paste('(fft(dgamma(1:863,shape = ', shape, ', scale = ', scale, ')))', sep = " ", collapse  = '*')))
GT.mean = Re(ifft(char_eq))
if(SI.status == TRUE){
if(case.history[1] == 1 && case.history[number.cases] == 1){
serial.interval = rep(0, length(IDP.S) + length(GT.mean) + length(IDP.S))
timing = seq(-length(IDP.S)+1, length(GT.mean)+length(IDP.S),1)
for(ii in 1:length(IDP.S)){
for(jj in 1:length(GT.mean)){
for(kk in 1:length(IDP.S)){
serial.interval[length(IDP.S) - ii + jj + kk] =
serial.interval[length(IDP.S) - ii + jj + kk] +
IDP.S[ii] * GT.mean[jj] * IDP.S[kk]
}
}
}
}
if(case.history[1] == 1 && case.history[number.cases] == 2){
serialinterval = rep(0, length(IDP.S) + length(GT.mean) + length(IDP.A))
timing = seq(-length(IDP.S)+1, length(GT.mean) + length(IDP.A), 1)
for(ii in 1:length(IDP.S)){
for(jj in 1:length(GT.mean)){
for(kk in 1:length(IDP.A)){
serial.interval[length(IDP.S) - ii + jj + kk] =
serial.interval[length(IDP.S) - ii + jj + kk] +
IDP.S[ii] * GT.mean[jj] * IDP.A[kk]
}
}
}
}
if(case.history[1] == 2 && case.history[number.cases] == 1){
serial.interval = rep(0, length(IDP.A) + length(GT.mean) + length(IDP.S))
timing = seq(-length(IDP.S)+1, length(GT.mean) + length(IDP.A), 1)
for(ii in 1:length(IDP.A)){
for(jj in 1:length(GT.mean)){
for(kk in 1:length(IDP.S)){
serial.interval[length(IDP.A) - ii + jj + kk] =
serial.interval[length(IDP.A) - ii + jj + kk] +
IDP.A[ii] * GT.mean[jj] * IDP.S[kk]
}
}
}
}
if(case.history[1] == 2 && case.history[number.cases] == 2){
serial.interval = rep(0, length(IDP.A) + length(GT.mean) + length(IDP.A))
timing = seq(-length(IDP.A)+1, length(GT.mean)+length(IDP.A), 1)
for(ii in 1:length(IDP.A)){
for(jj in 1:length(GT.mean)){
for(kk in 1:length(IDP.A)){
serial.interval[length(IDP.A) - ii + jj + kk] =
serial.interval[length(IDP.A) - ii + jj + kk] +
IDP.A[ii] * GT.mean[jj] * IDP.A[kk]
}
}
}
}
SI.dataframe = data.frame(timing, serial.interval)
colnames(SI.dataframe) = c("t", "p")
return(SI.dataframe)
#return(serial.interval)
}
else
timing = seq(1,length(GT.mean), 1)
GT.dataframe = data.frame(timing, GT.mean)
colnames(GT.dataframe) = c("t", "p")
return(GT.dataframe)
#return(GT.mean)
}
# function to compute output the GI or SI based on user input.
# argument casehistory: vector of 1's and 2's where 1 signifies "treated" or "symptomatic" and 2 signifies "untreated' or "asymptomatic"
# argument output.type: "Gamma" (Gamma distribution parameters), "NB" (Negative Binomial Parameters), "PDF" (Probability Density Function)
# argument SI.boolean: boolean which determines whether a serial interval will be calculated. passed to characteristic.equation function
SI.calculator  = function(casehistory, output.type, SI.boolean){
# call characteristic.equation function. Returns output based on user input
characteristic.eq = characteristic.equation(case.history = casehistory, SI.status = SI.boolean)
# normalize vector
generated.output = characteristic.eq
# evaluates by method of least squares. computes gamma parameters shape and scale
if(output.type == "Gamma"){
leastsquares.gamma = function(par){
x = min(characteristic.eq$Timing):max(characteristic.eq$Timing)
values = dgamma(x, shape = par[1], scale = par[2])
sum((values - characteristic.eq$PDF)^2)
}
generated.output = optim(par = c(5,20), leastsquares.gamma)$par
}
#evaluates by method of least squares. computes negative binomial parameters n and probability
if(output.type == "NB"){
leastsquares.nbinom = function(par){
x = min(characteristic.eq$Timing):max(characteristic.eq$Timing)
par = exp(par) + 10^-10
values = dnbinom(x, size = par[1], prob = par[2])
sum((values - characteristic.eq$PDF)^2)
}
optimized = optim(par=c(log(10), log(0.1)), leastsquares.nbinom)
generated.output = exp(optimized$par)
}
# returns generated.output. If output.type == "PDF", a vector of densities will be returned
# otherwise, generated.output is a set of fitted parameters
generated.output
}
gametocytemia.U = as.matrix(read.csv('~/Dropbox/malaria_serial_interval/data/Gametocytemia.csv',header=F))
getwd()
setwd("/Users/johnhuber/Dropbox/malaria_serial_interval/")
gametocytemia.U = as.matrix(read.csv('~/Dropbox/malaria_serial_interval/data/Gametocytemia.csv',header=F))
library(pracma)
# load appropriate data
gametocytemia.U = as.matrix(read.csv('~/Dropbox/malaria_serial_interval/data/Gametocytemia.csv',header=F))
IDP.A = hist(unlist(sapply(1:nrow(gametocytemia.U),function(ii) #Infection to Detection Period (Asymptomatic)
which(gametocytemia.U[ii,]>20))),breaks=seq(.5,801.5,1),plot=F)$density[1:365]
IDP.S = as.numeric(unlist(read.csv('../../data/bite_to_clinic.csv'))) #Infection to Detection Symptomatic
getwd()
